{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// these snippets are for running the recipes for ava very quickly in VS Code.
	// to add them:
	//   (1) go to File -> Preferences -> User Snippets
	//   (2) choose `typescript` from the options
	//   (3) insert them within your typescript.json file.  
	//       Or alternatively replace your typescript.json file with the contents of this entire file.
	"test a private function": {
		"prefix": "private",
		"body": [
			"const rewire = require('rewire');",
			"let $MODULE$ = rewire('$PATH$')",
			"const $FUNC$Stub = $MODULE$.__get__('$FUNC$')"
		]
	},
	"result-is": {
		"prefix": "result-is",
		"body": [
			"const result = ${1:called}",
			"t.is(result, ${2:expected});"
		]
	},
	"stub a function": {
		"prefix": "stub",
		"body": [
			"const sinon = require('sinon');",
			"let sandbox = sinon.createSandbox()",
			"",
			"const ${1:module} = require('${2:modulePath}${1:module}');",
			"const ${3:func}Fake = ()=> {",
			"\t// replacement code here...",
			"}",
			"",
			"sandbox.stub(${1:module}, '${3:func}')",
			"\t.callsFake(${3:func}Fake)",
			"",
			"// use stub here...",
			"",
			"sandbox.restore()"
		]
	},
	"create a basic test": {
		"prefix": "test",
		"body": [
			"import test from 'ava'",
			"",
			"test('${1:name}', t => {",
			"\tconst result = ${2:called}",
			"\tt.is(result, ${3:expected});",
			"})"	
		]
	},
	"test for an error": {
		"prefix": "throws-expect",
		"body": [
			"const error = t.throws(() => {",
				"\t${1:body}",
			 "})",
			 "",
			 "t.regex(error.message, /${2:regex}/);"
		]
	}
}